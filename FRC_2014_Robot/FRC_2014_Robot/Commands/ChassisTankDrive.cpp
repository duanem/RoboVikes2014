// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ChassisTankDrive.h"
ChassisTankDrive::ChassisTankDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void ChassisTankDrive::Initialize() {
	
	if(Robot::chassis->mReversed)
	{
		Robot::chassis->robotDrive
						->SetInvertedMotor(RobotDrive::kRearLeftMotor, false);
		Robot::chassis->robotDrive
						->SetInvertedMotor(RobotDrive::kRearRightMotor, false);
	}
	else
	{
		Robot::chassis->robotDrive
						->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
		Robot::chassis->robotDrive
						->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
	}
}
// Called repeatedly when this Command is scheduled to run
void ChassisTankDrive::Execute() {
	SmartDashboard::PutNumber("LeftEncoder", 
						Robot::chassis->leftEncoder->GetDistance());
	SmartDashboard::PutNumber("RightEncoder", 
							Robot::chassis->rightEncoder->GetDistance());
	const int leftY = 2;
	const int rightY = 5;
	if(Robot::chassis->mReversed)
	{
		Robot::chassis->robotDrive->TankDrive(Robot::oi->getDriver(), leftY,
				  	  	  	  	  	  	  	  Robot::oi->getDriver(), rightY);
	}
	else
	{	
		Robot::chassis->robotDrive->TankDrive(Robot::oi->getDriver(), rightY,
  	  	  	  	  	  	  	  	  	  	  	  Robot::oi->getDriver(), leftY);
	}
	                                    
}
// Make this return true when this Command no longer needs to run execute()
bool ChassisTankDrive::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void ChassisTankDrive::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ChassisTankDrive::Interrupted() {
}
