// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchSolenoid.cpp
#include "IntakeSwitchSolenoid.h"
IntakeSwitchSolenoid::IntakeSwitchSolenoid()
:on(false)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
=======


#include "ShooterShoot.h"

ShooterShoot::ShooterShoot() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterShoot.cpp
}
// Called just before this Command runs the first time
void ShooterShoot::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchSolenoid.cpp
void IntakeSwitchSolenoid::Execute() {
	if(on)
	{
		Robot::intake->solenoid->Set(DoubleSolenoid::kReverse);
		on = false;
	}
	else
	{
		Robot::intake->solenoid->Set(DoubleSolenoid::kForward);
		on = true;
	}
=======
void ShooterShoot::Execute() {
	if(Robot::shooter->shooterClutch->Get() == DoubleSolenoid::kForward)
		Robot::shooter->shooterClutch->Set(DoubleSolenoid::kReverse);
	else
		Robot::shooter->shooterClutch->Set(DoubleSolenoid::kForward);
>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterShoot.cpp
}
// Make this return true when this Command no longer needs to run execute()
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchSolenoid.cpp
bool IntakeSwitchSolenoid::IsFinished() {
	return true;
=======
bool ShooterShoot::IsFinished() {
	return true;
	//To Do: Do something smart here
>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterShoot.cpp
}
// Called once after isFinished returns true
void ShooterShoot::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchSolenoid.cpp
void IntakeSwitchSolenoid::Interrupted() {
=======
void ShooterShoot::Interrupted() {

>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterShoot.cpp
}
