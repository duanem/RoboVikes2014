// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchRoller.cpp
#include "IntakeSwitchRoller.h"
IntakeSwitchRoller::IntakeSwitchRoller()
:on(false)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake);
=======
#include "ShooterManualWinch.h"
ShooterManualWinch::ShooterManualWinch() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter);
>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterManualWinch.cpp
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void ShooterManualWinch::Initialize() {
	
}
// Called repeatedly when this Command is scheduled to run
<<<<<<< HEAD:FRC_2014_Robot/FRC_2014_Robot/Commands/IntakeSwitchRoller.cpp
void IntakeSwitchRoller::Execute() {
	if(on)
	{
		Robot::intake->roller->Set(0.0);
		on = false;
	}
	else	
	{
		Robot::intake->roller->Set(0.8);
		on = true;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool IntakeSwitchRoller::IsFinished() {
	return true;
}
// Called once after isFinished returns true
void IntakeSwitchRoller::End() {
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void IntakeSwitchRoller::Interrupted() {
=======
void ShooterManualWinch::Execute() {
	const double winchSpeed = -0.8;
	Robot::shooter->shooterWinch->Set(winchSpeed);
}
// Make this return true when this Command no longer needs to run execute()
bool ShooterManualWinch::IsFinished() {
	return false;
}
// Called once after isFinished returns true
void ShooterManualWinch::End() {
	Robot::shooter->shooterWinch->Set(0.0);
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterManualWinch::Interrupted() {
	Robot::shooter->shooterWinch->Set(0.0);
>>>>>>> refs/heads/feature/Shooter:FRC_2014_Robot/FRC_2014_Robot/Commands/ShooterManualWinch.cpp
}
